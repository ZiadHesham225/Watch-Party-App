using Microsoft.AspNetCore.Authorization;
using Microsoft.AspNetCore.SignalR;
using System.Collections.Concurrent;
using System.Security.Claims;
using WatchPartyApp.BusinessLogic.Interfaces;
using WatchPartyApp.DTOs;
using WatchPartyApp.Services.InMemory;
using WatchPartyApp.Models.InMemory;

namespace WatchPartyApp.Hubs
{
    public class RoomHub : Hub<IRoomClient>
    {
        private readonly IRoomService _roomService;
        private readonly InMemoryRoomManager _roomManager;
        private readonly ILogger<RoomHub> _logger;

        // Track position reports for sync
        private static readonly ConcurrentDictionary<string, ConcurrentDictionary<string, double>>
            _positionReports = new(); // roomId -> connectionId -> position

        public RoomHub(
            IRoomService roomService,
            InMemoryRoomManager roomManager,
            ILogger<RoomHub> logger)
        {
            _roomService = roomService;
            _roomManager = roomManager;
            _logger = logger;
        }

        public override async Task OnConnectedAsync()
        {
            await base.OnConnectedAsync();
            _logger.LogInformation($"Client connected: {Context.ConnectionId}");
        }

        public override async Task OnDisconnectedAsync(Exception exception)
        {
            try
            {
                var roomId = GetUserRoom();

                if (!string.IsNullOrEmpty(roomId))
                {
                    await LeaveRoom(roomId);
                }
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, $"Error in OnDisconnectedAsync for connection {Context.ConnectionId}");
            }

            await base.OnDisconnectedAsync(exception);
        }

        #region Room Management

        public async Task JoinRoom(string roomId, string displayName, string avatarUrl, bool isGuest = false, string password = null)
        {
            try
            {
                _logger.LogInformation($"User attempting to join room {roomId}");
                
                // Verify room exists and user can join
                var room = await _roomService.GetRoomByIdAsync(roomId);
                if (room == null || !room.IsActive)
                {
                    await Clients.Caller.Error("Room not found or no longer active.");
                    return;
                }

                // Check password if room is private
                if (room.IsPrivate && !await _roomService.ValidateRoomPasswordAsync(roomId, password))
                {
                    await Clients.Caller.Error("Incorrect password.");
                    return;
                }

                string participantId;
                bool isAdmin = false;

                if (isGuest)
                {
                    participantId = Context.ConnectionId; // Use connection ID for guests
                }
                else
                {
                    participantId = Context.User?.FindFirstValue(ClaimTypes.NameIdentifier);
                    if (string.IsNullOrEmpty(participantId))
                    {
                        await Clients.Caller.Error("User authentication required.");
                        return;
                    }
                    isAdmin = participantId == room.AdminId;
                }

                // Add participant to in-memory store
                var participant = new RoomParticipant(
                    participantId, 
                    Context.ConnectionId, 
                    displayName, 
                    avatarUrl, 
                    isGuest, 
                    isAdmin || _roomManager.GetParticipantCount(roomId) == 0 // First person gets control
                );

                _roomManager.AddParticipant(roomId, participant);

                // Join SignalR group
                await Groups.AddToGroupAsync(Context.ConnectionId, roomId);

                // Store context items
                Context.Items["RoomId"] = roomId;
                Context.Items["ParticipantId"] = participantId;
                Context.Items["DisplayName"] = displayName;
                Context.Items["IsGuest"] = isGuest;

                // Notify others and send current state
                await Clients.OthersInGroup(roomId).RoomJoined(roomId, participantId, displayName, avatarUrl);
                await Clients.OthersInGroup(roomId).ParticipantJoinedNotification(displayName);

                // Send current room state to joining user
                await Clients.Caller.ForceSyncPlayback(room.CurrentPosition, room.IsPlaying);
                
                var participants = _roomManager.GetRoomParticipants(roomId);
                var participantDtos = participants.Select(p => new RoomParticipantDto
                {
                    Id = p.Id,
                    DisplayName = p.DisplayName,
                    AvatarUrl = p.AvatarUrl,
                    IsGuest = p.IsGuest,
                    HasControl = p.HasControl,
                    JoinedAt = p.JoinedAt,
                    IsAdmin = p.Id == room.AdminId
                }).ToList();

                await Clients.Caller.ReceiveRoomParticipants(participantDtos);
                
                // Send chat history
                var chatHistory = _roomManager.GetRoomMessages(roomId);
                var messageDtos = chatHistory.Select(m => new ChatMessageDto
                {
                    Id = m.Id,
                    SenderId = m.SenderId,
                    SenderName = m.SenderName,
                    AvatarUrl = m.AvatarUrl,
                    IsFromGuest = m.IsFromGuest,
                    Content = m.Content,
                    SentAt = m.SentAt
                }).ToList();

                await Clients.Caller.ReceiveChatHistory(messageDtos);

                _logger.LogInformation($"{(isGuest ? "Guest" : "User")} {participantId} joined room {roomId}");
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, $"Error joining room {roomId}");
                await Clients.Caller.Error("An error occurred while joining the room.");
                throw;
            }
        }

        public async Task LeaveRoom(string roomId)
        {
            try
            {
                var participantId = Context.Items["ParticipantId"] as string;
                var displayName = Context.Items["DisplayName"] as string ?? "Unknown User";
                var isGuest = Context.Items["IsGuest"] as bool? ?? false;

                if (string.IsNullOrEmpty(participantId))
                {
                    return;
                }

                var participant = _roomManager.GetParticipant(roomId, participantId);
                bool wasController = participant?.HasControl ?? false;

                // Remove from in-memory store
                _roomManager.RemoveParticipant(roomId, participantId);

                // Leave SignalR group
                await Groups.RemoveFromGroupAsync(Context.ConnectionId, roomId);

                // Notify others
                await Clients.OthersInGroup(roomId).RoomLeft(roomId, participantId, displayName);
                await Clients.OthersInGroup(roomId).ParticipantLeftNotification(displayName);

                // Transfer control if the controller left
                if (wasController)
                {
                    _roomManager.TransferControlToNext(roomId, participantId);
                    var newController = _roomManager.GetController(roomId);
                    if (newController != null)
                    {
                        await Clients.Group(roomId).ControlTransferred(newController.Id, newController.DisplayName);
                    }
                }

                // Clear context items
                Context.Items.Remove("RoomId");
                Context.Items.Remove("ParticipantId");
                Context.Items.Remove("DisplayName");
                Context.Items.Remove("IsGuest");

                // Check if room is empty and should be cleaned up
                if (_roomManager.GetParticipantCount(roomId) == 0)
                {
                    _roomManager.ClearRoomData(roomId);
                    _positionReports.TryRemove(roomId, out _);
                }

                _logger.LogInformation($"{(isGuest ? "Guest" : "User")} {participantId} left room {roomId}");
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, $"Error leaving room {roomId}");
                throw;
            }
        }

        [Authorize]
        public async Task CloseRoom(string roomId)
        {
            try
            {
                var userId = Context.User?.FindFirstValue(ClaimTypes.NameIdentifier);
                if (string.IsNullOrEmpty(userId))
                {
                    await Clients.Caller.Error("Authentication required to close rooms.");
                    return;
                }

                bool isAdmin = await _roomService.IsUserAdminAsync(roomId, userId);
                if (!isAdmin)
                {
                    _logger.LogWarning($"Non-admin user {userId} attempted to close room {roomId}");
                    await Clients.Caller.Error("Only room administrators can close rooms.");
                    return;
                }

                bool success = await _roomService.EndRoomAsync(roomId, userId);
                if (!success)
                {
                    _logger.LogWarning($"Failed to end room {roomId} in database");
                    await Clients.Caller.Error("Failed to close the room.");
                    return;
                }

                await Clients.Group(roomId).RoomClosed(roomId, "Room closed by admin");

                _roomManager.ClearRoomData(roomId);
                _positionReports.TryRemove(roomId, out _);
                _logger.LogInformation($"Room {roomId} closed by admin {userId}");
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, $"Error closing room {roomId}");
                await Clients.Caller.Error("An error occurred while closing the room.");
                throw;
            }
        }

        public async Task ChangeVideo(string roomId, string videoUrl, string videoTitle, string? videoThumbnail)
        {
            try
            {
                var participantId = Context.Items["ParticipantId"] as string;
                if (string.IsNullOrEmpty(participantId))
                {
                    await Clients.Caller.Error("Unable to identify participant.");
                    return;
                }

                var participant = _roomManager.GetParticipant(roomId, participantId);
                if (participant == null)
                {
                    await Clients.Caller.Error("You are not in this room.");
                    return;
                }

                // Check if user has control or is admin
                bool isAdmin = await _roomService.IsUserAdminAsync(roomId, participantId);
                if (!participant.HasControl && !isAdmin)
                {
                    await Clients.Caller.Error("You don't have permission to change the video.");
                    return;
                }

                // Update room in database
                await _roomService.UpdateRoomVideoAsync(roomId, videoUrl, videoTitle, videoThumbnail);

                // Notify all participants
                await Clients.Group(roomId).VideoChanged(videoUrl, videoTitle, videoThumbnail);

                _logger.LogInformation($"Video changed in room {roomId} by {participantId}");
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, $"Error changing video in room {roomId}");
                await Clients.Caller.Error("Failed to change video.");
                throw;
            }
        }
        #endregion

        #region Playback Control

        public async Task UpdatePlayback(string roomId, double position, bool isPlaying)
        {
            try
            {
                var participantId = Context.Items["ParticipantId"] as string;
                if (string.IsNullOrEmpty(participantId))
                {
                    await Clients.Caller.Error("Unable to identify participant.");
                    return;
                }

                var participant = _roomManager.GetParticipant(roomId, participantId);
                if (participant == null || !participant.HasControl)
                {
                    await Clients.Caller.Error("You don't have permission to control playback.");
                    return;
                }

                // Update database state
                await _roomService.UpdatePlaybackStateAsync(roomId, participantId, position, isPlaying);

                // Broadcast to all clients in the room
                await Clients.Group(roomId).ReceivePlaybackUpdate(position, isPlaying);

                _logger.LogDebug($"Playback updated in room {roomId}: pos={position}, playing={isPlaying}");
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, $"Error updating playback in room {roomId}");
                await Clients.Caller.Error("Failed to update playback state.");
                throw;
            }
        }

        public async Task PlayVideo(string roomId, double position)
        {
            try
            {
                _logger.LogInformation($"PlayVideo called for room {roomId} at position {position} by connection {Context.ConnectionId}");
                
                var participantId = Context.Items["ParticipantId"] as string;
                if (string.IsNullOrEmpty(participantId))
                {
                    _logger.LogWarning($"PlayVideo: No participant ID found for connection {Context.ConnectionId}");
                    await Clients.Caller.Error("Unable to identify participant.");
                    return;
                }

                var participant = _roomManager.GetParticipant(roomId, participantId);
                if (participant == null)
                {
                    _logger.LogWarning($"PlayVideo: Participant {participantId} not found in room {roomId}");
                    await Clients.Caller.Error("You are not in this room.");
                    return;
                }

                if (!participant.HasControl)
                {
                    _logger.LogWarning($"PlayVideo: Participant {participantId} does not have control in room {roomId}");
                    await Clients.Caller.Error("You don't have permission to control playback.");
                    return;
                }

                _logger.LogInformation($"PlayVideo: Updating playback state for room {roomId} to playing at position {position}");

                // Update database state to playing with the provided position
                await _roomService.UpdatePlaybackStateAsync(roomId, participantId, position, true);

                // Broadcast play command to all clients
                await Clients.Group(roomId).PlayVideo();
                await Clients.Group(roomId).ReceivePlaybackUpdate(position, true);

                _logger.LogInformation($"Video played in room {roomId} by {participantId} at position {position}");
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, $"Error playing video in room {roomId}");
                await Clients.Caller.Error($"Failed to play video: {ex.Message}");
            }
        }

        public async Task PauseVideo(string roomId, double position)
        {
            try
            {
                _logger.LogInformation($"PauseVideo called for room {roomId} at position {position} by connection {Context.ConnectionId}");
                
                var participantId = Context.Items["ParticipantId"] as string;
                if (string.IsNullOrEmpty(participantId))
                {
                    _logger.LogWarning($"PauseVideo: No participant ID found for connection {Context.ConnectionId}");
                    await Clients.Caller.Error("Unable to identify participant.");
                    return;
                }

                var participant = _roomManager.GetParticipant(roomId, participantId);
                if (participant == null)
                {
                    _logger.LogWarning($"PauseVideo: Participant {participantId} not found in room {roomId}");
                    await Clients.Caller.Error("You are not in this room.");
                    return;
                }

                if (!participant.HasControl)
                {
                    _logger.LogWarning($"PauseVideo: Participant {participantId} does not have control in room {roomId}");
                    await Clients.Caller.Error("You don't have permission to control playback.");
                    return;
                }

                _logger.LogInformation($"PauseVideo: Updating playback state for room {roomId} to paused at position {position}");

                // Update database state to paused with the provided position
                await _roomService.UpdatePlaybackStateAsync(roomId, participantId, position, false);

                // Broadcast pause command to all clients
                await Clients.Group(roomId).PauseVideo();
                await Clients.Group(roomId).ReceivePlaybackUpdate(position, false);

                _logger.LogInformation($"Video paused in room {roomId} by {participantId} at position {position}");
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, $"Error pausing video in room {roomId}");
                await Clients.Caller.Error($"Failed to pause video: {ex.Message}");
            }
        }

        public async Task SeekVideo(string roomId, double position)
        {
            try
            {
                var participantId = Context.Items["ParticipantId"] as string;
                if (string.IsNullOrEmpty(participantId))
                {
                    await Clients.Caller.Error("Unable to identify participant.");
                    return;
                }

                var participant = _roomManager.GetParticipant(roomId, participantId);
                if (participant == null || !participant.HasControl)
                {
                    await Clients.Caller.Error("You don't have permission to control playback.");
                    return;
                }

                // Get current playing state
                var room = await _roomService.GetRoomByIdAsync(roomId);
                if (room == null)
                {
                    await Clients.Caller.Error("Room not found.");
                    return;
                }

                // Update database state with new position
                await _roomService.UpdatePlaybackStateAsync(roomId, participantId, position, room.IsPlaying);

                // Broadcast seek command to all clients
                await Clients.Group(roomId).SeekVideo(position);
                await Clients.Group(roomId).ReceivePlaybackUpdate(position, room.IsPlaying);

                _logger.LogDebug($"Video seeked in room {roomId} to position {position} by {participantId}");
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, $"Error seeking video in room {roomId}");
                await Clients.Caller.Error("Failed to seek video.");
                throw;
            }
        }

        public async Task RequestSync(string roomId)
        {
            try
            {
                var room = await _roomService.GetRoomByIdAsync(roomId);
                if (room != null && room.IsActive)
                {
                    await Clients.Caller.ForceSyncPlayback(room.CurrentPosition, room.IsPlaying);
                }
                else
                {
                    await Clients.Caller.Error("Room not found or no longer active.");
                }
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, $"Error requesting sync for room {roomId}");
                await Clients.Caller.Error("Failed to sync playback.");
                throw;
            }
        }

        public async Task BroadcastHeartbeat(string roomId, double position)
        {
            try
            {
                var participantId = Context.Items["ParticipantId"] as string;
                if (string.IsNullOrEmpty(participantId))
                {
                    return;
                }

                var participant = _roomManager.GetParticipant(roomId, participantId);
                if (participant != null && participant.HasControl)
                {
                    await _roomService.UpdatePlaybackStateAsync(roomId, participantId, position, true);
                    await Clients.OthersInGroup(roomId).ReceiveHeartbeat(position);
                }
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, $"Error broadcasting heartbeat in room {roomId}");
            }
        }

        public async Task ReportPosition(string roomId, double position)
        {
            try
            {
                // Store the position report
                if (!_positionReports.TryGetValue(roomId, out var reports))
                {
                    reports = new ConcurrentDictionary<string, double>();
                    _positionReports[roomId] = reports;
                }

                reports[Context.ConnectionId] = position;

                // Get count of participants in room to determine if everyone has reported
                int totalParticipants = _roomManager.GetParticipantCount(roomId);
                int reportedParticipants = reports.Count;

                // If most participants have reported (80% or more), analyze and sync if needed
                if (reportedParticipants >= totalParticipants * 0.8 && reportedParticipants >= 2)
                {
                    await AnalyzeAndSyncPositions(roomId);
                }
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, $"Error reporting position in room {roomId}");
            }
        }

        private async Task AnalyzeAndSyncPositions(string roomId)
        {
            try
            {
                if (!_positionReports.TryGetValue(roomId, out var reports) || reports.Count < 2)
                {
                    return;
                }

                // Get the median position as the "correct" one
                var positions = reports.Values.OrderBy(p => p).ToList();
                double medianPosition = positions[positions.Count / 2];

                // Find outliers (more than 3 seconds off)
                const double tolerance = 3.0;
                var outliers = reports
                    .Where(r => Math.Abs(r.Value - medianPosition) > tolerance)
                    .Select(r => r.Key)
                    .ToList();

                // Sync outliers to the median position
                var room = await _roomService.GetRoomByIdAsync(roomId);
                if (room != null && room.IsActive)
                {
                    foreach (var outlierConnectionId in outliers)
                    {
                        await Clients.Client(outlierConnectionId).ForceSyncPlayback(medianPosition, room.IsPlaying);
                        _logger.LogInformation($"Forced sync for outlier in room {roomId}: connection {outlierConnectionId}");
                    }
                }
                _positionReports[roomId].Clear();
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, $"Error analyzing positions in room {roomId}");
            }
        }
        #endregion

        #region Control Management

        [Authorize]
        public async Task TransferControl(string roomId, string newControllerId)
        {
            try
            {
                var currentUserId = Context.User?.FindFirstValue(ClaimTypes.NameIdentifier);
                if (string.IsNullOrEmpty(currentUserId))
                {
                    await Clients.Caller.Error("Authentication required to transfer control.");
                    return;
                }

                bool isAdmin = await _roomService.IsUserAdminAsync(roomId, currentUserId);
                if (!isAdmin)
                {
                    _logger.LogWarning($"Non-admin user {currentUserId} attempted to transfer control in room {roomId}");
                    await Clients.Caller.Error("Only the room administrator can transfer control.");
                    return;
                }

                var newController = _roomManager.GetParticipant(roomId, newControllerId);
                if (newController == null)
                {
                    await Clients.Caller.Error("Target participant not found in room.");
                    return;
                }

                _roomManager.SetController(roomId, newControllerId);
                await Clients.Group(roomId).ControlTransferred(newControllerId, newController.DisplayName);

                _logger.LogInformation($"Control transferred in room {roomId} from {currentUserId} to {newControllerId}");
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, $"Error transferring control in room {roomId}");
                await Clients.Caller.Error("An error occurred while transferring control.");
                throw;
            }
        }

        #endregion

        #region Chat

        public async Task SendMessage(string roomId, string message)
        {
            try
            {
                if (string.IsNullOrWhiteSpace(message))
                {
                    return;
                }

                var participantId = Context.Items["ParticipantId"] as string;
                var displayName = Context.Items["DisplayName"] as string ?? "Unknown User";
                var isGuest = Context.Items["IsGuest"] as bool? ?? false;

                if (string.IsNullOrEmpty(participantId))
                {
                    await Clients.Caller.Error("Unable to identify participant for message sending.");
                    return;
                }

                var participant = _roomManager.GetParticipant(roomId, participantId);
                if (participant == null)
                {
                    await Clients.Caller.Error("You are no longer in this room.");
                    return;
                }

                // Create and store message
                var chatMessage = new ChatMessage(participantId, displayName, participant.AvatarUrl, isGuest, message);
                _roomManager.AddMessage(roomId, chatMessage);

                // Broadcast to all participants
                await Clients.Group(roomId).ReceiveMessage(
                    participantId,
                    displayName,
                    participant.AvatarUrl,
                    message,
                    DateTime.UtcNow);

                _logger.LogDebug($"Message sent in room {roomId} by {participantId}: {message}");
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, $"Error sending message in room {roomId}");
                await Clients.Caller.Error("Failed to send message.");
                throw;
            }
        }
        #endregion

        #region Helper Methods

        private string GetUserRoom()
        {
            if (Context.Items.TryGetValue("RoomId", out var roomId) && roomId != null)
            {
                return roomId.ToString();
            }
            return null;
        }

        #endregion
    }
}
